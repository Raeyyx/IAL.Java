import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

public class RPGGame {
    public static void main(String[] args) {
        JFrame frame = new JFrame("RPG Game - Sturmwind");
        GamePanel gamePanel = new GamePanel();
        frame.add(gamePanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setVisible(true);
    }
}

// Separate GamePanel class
class GamePanel extends JPanel implements ActionListener {
    private Player player;
    private List<Enemy> enemies;
    private List<Item> items;
    private List<NPC> npcs;
    private List<Quest> quests;
    private Timer timer;
    private HashMap<String, Image> animations;
    private Random random;
    private int score;
    private boolean isNight;
    private boolean inSafeZone;
    private int weatherState; // 0: Clear, 1: Rainy, 2: Stormy
    private boolean doubleXP; // Double XP event
    private List<Ally> allies; // Allies that can help the player
    private int playerStamina; // Stamina level of the player
    private boolean isShopOpen; // Shop availability
    private int mana; // Mana for special abilities
    private boolean isTrading; // Whether the player is trading
    private List<Trap> traps; // Traps that player needs to avoid
    private boolean isPoisoned; // Player status effect
    private int poisonDuration; // Duration for poison effect
    private boolean playerShield; // Shield status
    private int shieldDuration; // Duration of shield
    private boolean isFishing; // Player activity - fishing
    private int fishingSkill; // Fishing skill level
    private int currentDungeonLevel; // Player's progress in the dungeon
    private boolean rageMode; // Player rage mode
    private int rageDuration; // Duration of rage mode
    private List<Mount> mounts; // Player's available mounts
    private boolean isCrafting; // Player activity - crafting
    private boolean treasureMapFound; // Whether the player found a treasure map
    private boolean hasPet; // Whether the player has a pet companion
    private Pet pet; // The pet companion
    private boolean stealthMode; // Stealth mode status
    private int stealthDuration; // Duration of stealth mode
    private boolean hasGuild; // Whether the player has joined a guild
    private Guild playerGuild; // The player's guild
    private boolean isTraining; // Player activity - training skills
    private int trainingSkill; // Current skill being trained
    private boolean hasRidingSkill; // Whether the player has learned riding
    private boolean isBerserkModeActive; // Berserk mode status for the player
    private int berserkDuration; // Duration of the berserk mode
    private boolean hasMap; // Whether the player has acquired a world map
    private boolean isCamping; // Camping status
    private boolean isWeatherChanging; // Status for dynamic weather changes
    private boolean hasTeleportAbility; // Whether the player has a teleport ability
    private int reputation; // Player's reputation level
    private boolean isBuildingCampfire; // Status for campfire building
    private boolean hasMagicWeapon; // Whether the player has a magic weapon
    private boolean isSummoningAlly; // Whether the player is summoning an ally
    private boolean isCooking; // Cooking status
    private int hungerLevel; // Player's hunger level
    private boolean isInArena; // Whether the player is in the arena
    private List<Artifact> artifacts; // Artifacts that the player collects
    private boolean isUsingPotion; // Status for potion usage
    private boolean hasSecretKey; // Whether the player has a secret key
    private int lightLevel; // Level of light in dark areas
    private boolean isMining; // Mining status
    private boolean isForgingWeapon; // Forging weapon status
    private boolean hasQuestLog; // Whether the player has a quest log
    private boolean isTradingWithMerchant; // Whether the player is trading with a merchant
    private boolean isExploringRuins; // Status for exploring ancient ruins
    private boolean hasFoundTreasureChest; // Whether the player has found a treasure chest
    private boolean isRepairingEquipment; // Repairing equipment status
    private boolean hasMagicSpells; // Whether the player has learned magic spells
    private boolean isLearningMagic; // Player activity - learning magic spells
    private List<Spell> spellBook; // Player's spell book
    private boolean isBreedingMounts; // Whether the player is breeding mounts
    private List<Herb> herbsCollected; // Herbs collected for alchemy
    private boolean isCreatingPotion; // Status for potion creation
    private boolean isBuildingShelter; // Player activity - building a shelter
    private boolean hasEnergyShield; // Whether the player has an energy shield
    private int energyShieldDuration; // Duration of the energy shield
    private boolean isEnchantingWeapon; // Enchanting weapon status
    private boolean isAttackingCastle; // Whether the player is attacking a castle
    private boolean isDefendingCastle; // Whether the player is defending a castle
    private boolean hasBeacon; // Whether the player has a beacon for summoning allies
    private boolean isInvestigatingMystery; // Investigating a mysterious event
    private boolean hasMagicAmulet; // Whether the player has a magic amulet
    private boolean isNavigatingLabyrinth; // Player activity - navigating a labyrinth
    private boolean hasTeleportCrystal; // Whether the player has a teleport crystal
    private boolean isTrainingPet; // Training pet companion
    private boolean hasSecretMap; // Whether the player has found a secret map
    private boolean isOpeningPortal; // Player activity - opening a magical portal
    private boolean hasAlchemySkill; // Whether the player has learned alchemy
    private boolean isAlchemyActive; // Status for alchemy crafting
    private List<Boss> bosses; // List of different boss types
    private List<Dungeon> dungeons; // List of different dungeons
    private boolean isUpgradingGear; // Player activity - upgrading gear
    private boolean isFishingCompetition; // Whether the player is in a fishing competition
    private boolean hasTreasureDetector; // Whether the player has a treasure detector
    private boolean isSiegeWarActive; // Whether the player is participating in a siege war
    private boolean hasMagicCarpet; // Whether the player has acquired a magic carpet
    private boolean isRidingMagicCarpet; // Status for riding a magic carpet
    private boolean isTrainingCombatSkills; // Player activity - training combat skills
    private boolean isBlacksmithing; // Status for crafting metal items at the blacksmith
    private boolean hasPortableForge; // Whether the player has a portable forge for crafting
    private boolean isRaidingCastle; // Whether the player is raiding an enemy castle
    private boolean isBlessingActive; // Status for receiving a blessing from the city's priest
    private boolean hasSpecialMount; // Whether the player has acquired a special mount
    private boolean isArcheryTraining; // Player activity - training archery skills
    private boolean isHuntingWildlife; // Player activity - hunting wildlife for resources
    private boolean isBuildingTraps; // Status for building traps to defend city
    private boolean isPotionBrewing; // Status for brewing advanced potions
    private boolean isHerbCultivating; // Whether the player is cultivating herbs for alchemy
    private boolean isDragonTaming; // Status for attempting to tame a dragon
    private boolean isCookingContest; // Whether the player is participating in a cooking contest
    private boolean isArenaChampion; // Whether the player has become the arena champion
    private boolean isFestivalParticipating; // Whether the player is participating in a city festival
    private boolean isTreasureHuntActive; // Whether the player is participating in a treasure hunt event
    private boolean hasRoyalDecree; // Whether the player has a royal decree from the king

    public GamePanel() {
        this.animations = AnimationsLoader.loadAnimations();
        this.player = new Player(animations);
        this.enemies = new ArrayList<>();
        this.items = new ArrayList<>();
        this.npcs = new ArrayList<>();
        this.quests = new ArrayList<>();
        this.allies = new ArrayList<>();
        this.traps = new ArrayList<>();
        this.mounts = new ArrayList<>();
        this.artifacts = new ArrayList<>();
        this.spellBook = new ArrayList<>();
        this.herbsCollected = new ArrayList<>();
        this.bosses = new ArrayList<>();
        this.dungeons = new ArrayList<>();
        this.random = new Random();
        this.timer = new Timer(16, this); // 60 FPS
        this.timer.start();
        this.score = 0;
        this.isNight = false;
        this.inSafeZone = false;
        this.weatherState = 0; // Start with clear weather
        this.doubleXP = false;
        this.playerStamina = 100;
        this.isShopOpen = false;
        this.mana = 50;
        this.isTrading = false;
        this.isPoisoned = false;
        this.poisonDuration = 0;
        this.playerShield = false;
        this.shieldDuration = 0;
        this.isFishing = false;
        this.fishingSkill = 1;
        this.currentDungeonLevel = 1;
        this.rageMode = false;
        this.rageDuration = 0;
        this.isCrafting = false;
        this.treasureMapFound = false;
        this.hasPet = false;
        this.pet = null;
        this.stealthMode = false;
        this.stealthDuration = 0;
        this.hasGuild = false;
        this.playerGuild = null;
        this.isTraining = false;
        this.trainingSkill = 0;
        this.hasRidingSkill = false;
        this.isBerserkModeActive = false;
        this.berserkDuration = 0;
        this.hasMap = false;
        this.isCamping = false;
        this.isWeatherChanging = false;
        this.hasTeleportAbility = false;
        this.reputation = 0;
        this.isBuildingCampfire = false;
        this.hasMagicWeapon = false;
        this.isSummoningAlly = false;
        this.isCooking = false;
        this.hungerLevel = 100;
        this.isInArena = false;
        this.isUsingPotion = false;
        this.hasSecretKey = false;
        this.lightLevel = 100;
        this.isMining = false;
        this.isForgingWeapon = false;
        this.hasQuestLog = false;
        this.isTradingWithMerchant = false;
        this.isExploringRuins = false;
        this.hasFoundTreasureChest = false;
        this.isRepairingEquipment = false;
        this.hasMagicSpells = false;
        this.isLearningMagic = false;
        this.isBreedingMounts = false;
        this.isCreatingPotion = false;
        this.isBuildingShelter = false;
        this.hasEnergyShield = false;
        this.energyShieldDuration = 0;
        this.isEnchantingWeapon = false;
        this.isAttackingCastle = false;
        this.isDefendingCastle = false;
        this.hasBeacon = false;
        this.isInvestigatingMystery = false;
        this.hasMagicAmulet = false;
        this.isNavigatingLabyrinth = false;
        this.hasTeleportCrystal = false;
        this.isTrainingPet = false;
        this.hasSecretMap = false;
        this.isOpeningPortal = false;
        this.hasAlchemySkill = false;
        this.isAlchemyActive = false;
        this.isUpgradingGear = false;
        this.isFishingCompetition = false;
        this.hasTreasureDetector = false;
        this.isSiegeWarActive = false;
        this.hasMagicCarpet = false;
        this.isRidingMagicCarpet = false;
        this.isTrainingCombatSkills = false;
        this.isBlacksmithing = false;
        this.hasPortableForge = false;
        this.isRaidingCastle = false;
        this.isBlessingActive = false;
        this.hasSpecialMount = false;
        this.isArcheryTraining = false;
        this.isHuntingWildlife = false;
        this.isBuildingTraps = false;
        this.isPotionBrewing = false;
        this.isHerbCultivating = false;
        this.isDragonTaming = false;
        this.isCookingContest = false;
        this.isArenaChampion = false;
        this.isFestivalParticipating = false;
        this.isTreasureHuntActive = false;
        this.hasRoyalDecree = false;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        // Game logic updates go here
        repaint();
    }
}

class Player {
    private int health;
    private int mana;
    private int stamina;
    private HashMap<String, Image> animations;
    private int x, y;

    public Player(HashMap<String, Image> animations) {
        this.animations = animations;
        this.health = 100;
        this.mana = 50;
        this.stamina = 100;
        this.x = 100;
        this.y = 100;
    }

    public void move(int dx, int dy) {
        x += dx;
        y += dy;
    }

    public void attack(Enemy enemy) {
        enemy.takeDamage(10);
    }

    public void takeDamage(int damage) {
        health -= damage;
        if (health <= 0) {
            // Handle player death
        }
    }
}

class Enemy {
    private int health;
    private int damage;
    private int x, y;
    private HashMap<String, Image> animations;

    public Enemy(HashMap<String, Image> animations, int x, int y) {
        this.animations = animations;
        this.health = 50;
        this.damage = 10;
        this.x = x;
        this.y = y;
    }

    public void takeDamage(int damage) {
        health -= damage;
        if (health <= 0) {
            // Handle enemy death
        }
    }

    public void attack(Player player) {
        player.takeDamage(damage);
    }
}

class Ally {
    private String name;
    private int health;
    private int damage;

    public Ally(String name, int health, int damage) {
        this.name = name;
        this.health = health;
        this.damage = damage;
    }

    public void assist(Player player) {
        // Logic for assisting the player during combat
    }
}

class Item {
    private String name;
    private String type;
    private int value;

    public Item(String name, String type, int value) {
        this.name = name;
        this.type = type;
        this.value = value;
    }

    public void use(Player player) {
        // Logic for using the item
    }
}

class Pet {
    private String name;
    private int loyalty;
    private String type;

    public Pet(String name, int loyalty, String type) {
        this.name = name;
        this.loyalty = loyalty;
        this.type = type;
    }

    public void follow(Player player) {
        // Logic for pet following the player
    }
}

class Mount {
    private String name;
    private int speed;
    private boolean isSpecial;

    public Mount(String name, int speed, boolean isSpecial) {
        this.name = name;
        this.speed = speed;
        this.isSpecial = isSpecial;
    }

    public void ride(Player player) {
        // Logic for riding the mount
    }
}

class Boss {
    private String name;
    private int health;
    private int damage;
    private Loot loot;

    public Boss(String name, int health, int damage, Loot loot) {
        this.name = name;
        this.health = health;
        this.damage = damage;
        this.loot = loot;
    }

    public Loot getLoot() {
        return loot;
    }
}

class Dungeon {
    private String name;
    private int difficulty;
    private Boss boss;
    private Loot reward;

    public Dungeon(String name, int difficulty, Boss boss, Loot reward) {
        this.name = name;
        this.difficulty = difficulty;
        this.boss = boss;
        this.reward = reward;
    }
}

class Loot {
    private String name;
    private String rarity;

    public Loot(String name, String rarity) {
        this.name = name;
        this.rarity = rarity;
    }
}

class NPC {
    private String name;
    private int x, y;

    public NPC(String name, int x, int y) {
        this.name = name;
        this.x = x;
        this.y = y;
    }
}

class StableMaster extends NPC {
    public StableMaster(String name, int x, int y) {
        super(name, x, y);
    }
}

class RPGGameElements {
    class Artifact {
        private String name;
        private String description;

        public Artifact(String name, String description) {
            this.name = name;
            this.description = description;
        }
    }

    class Trap {
        private String type;
        private int damage;

        public Trap(String type, int damage) {
            this.type = type;
            this.damage = damage;
        }

        public void trigger(Player player) {
            player.takeDamage(damage);
        }
    }

    class Spell {
        private String name;
        private int manaCost;
        private int damage;

        public Spell(String name, int manaCost, int damage) {
            this.name = name;
            this.manaCost = manaCost;
            this.damage = damage;
        }

        public int getManaCost() {
            return manaCost;
        }

        public int getDamage() {
            return damage;
        }
    }

    class Guild {
        private String name;
        private List<Player> members;

        public Guild(String name) {
            this.name = name;
            this.members = new ArrayList<>();
        }

        public void addMember(Player player) {
            members.add(player);
        }
    }
}

class RPGGameAdditionalElements {
    class Castle {
        private String name;
        private int defenseLevel;
        private List<Enemy> guards;
        private int maxGuards;

        public Castle(String name, int defenseLevel, int maxGuards) {
            this.name = name;
            this.defenseLevel = defenseLevel;
            this.maxGuards = maxGuards;
            this.guards = new ArrayList<>();
        }

        public void addGuard(Enemy guard) {
            if (guards.size() < maxGuards) {
                guards.add(guard);
            } else {
                System.out.println("Cannot add more guards, maximum capacity reached.");
            }
        }

        public void defend(Player player) {
            System.out.println("The castle " + name + " is being defended!");
            for (Enemy guard : guards) {
                guard.attack(player);
            }
            if (player.getHealth() <= 0) {
                System.out.println(player.getName() + " has been defeated by the castle guards!");
            }
        }

        public void upgradeDefense(int additionalDefense) {
            defenseLevel += additionalDefense;
            System.out.println("Castle defense level upgraded to: " + defenseLevel);
        }
    }

    class Campfire {
        private int healingAmount;
        private int fuelLevel;
        private int maxFuel;

        public Campfire(int healingAmount, int maxFuel) {
            this.healingAmount = healingAmount;
            this.fuelLevel = maxFuel;
            this.maxFuel = maxFuel;
        }

        public void rest(Player player) {
            if (fuelLevel > 0) {
                player.heal(healingAmount);
                fuelLevel--;
                System.out.println(player.getName() + " rested at the campfire and healed for " + healingAmount + " points. Remaining fuel: " + fuelLevel);
            } else {
                System.out.println("The campfire has no fuel left. Unable to rest.");
            }
        }

        public void addFuel(int fuel) {
            if (fuelLevel + fuel <= maxFuel) {
                fuelLevel += fuel;
                System.out.println("Campfire fuel level increased to: " + fuelLevel);
            } else {
                fuelLevel = maxFuel;
                System.out.println("Campfire is now at maximum fuel level: " + maxFuel);
            }
        }
    }

    class Arena {
        private String name;
        private List<Enemy> challengers;
        private int audienceCapacity;
        private int currentAudience;

        public Arena(String name, int audienceCapacity) {
            this.name = name;
            this.audienceCapacity = audienceCapacity;
            this.currentAudience = 0;
            this.challengers = new ArrayList<>();
        }

        public void addChallenger(Enemy enemy) {
            challengers.add(enemy);
            System.out.println(enemy.getName() + " has been added as a challenger in the arena " + name + ".");
        }

        public void startBattle(Player player) {
            System.out.println(player.getName() + " has entered the arena " + name + "!");
            for (Enemy challenger : challengers) {
                while (challenger.getHealth() > 0 && player.getHealth() > 0) {
                    player.attack(challenger);
                    if (challenger.getHealth() > 0) {
                        challenger.attack(player);
                    }
                }
                if (player.getHealth() <= 0) {
                    System.out.println(player.getName() + " has been defeated by " + challenger.getName() + "!");
                    return;
                }
                System.out.println(challenger.getName() + " has been defeated!");
            }
            System.out.println(player.getName() + " has won the battle in the arena!");
        }

        public void addAudience(int audience) {
            if (currentAudience + audience <= audienceCapacity) {
                currentAudience += audience;
                System.out.println(audience + " audience members have entered the arena. Current audience: " + currentAudience);
            } else {
                System.out.println("The arena cannot hold more audience members. Maximum capacity: " + audienceCapacity);
            }
        }
    }

    class Herb {
        private String name;
        private String effect;
        private int rarity;

        public Herb(String name, String effect, int rarity) {
            this.name = name;
            this.effect = effect;
            this.rarity = rarity;
        }

        public String getEffect() {
            return effect;
        }

        public int getRarity() {
            return rarity;
        }
    }

    class Alchemy {
        private List<Herb> ingredients;
        private int alchemySkillLevel;

        public Alchemy(int alchemySkillLevel) {
            this.ingredients = new ArrayList<>();
            this.alchemySkillLevel = alchemySkillLevel;
        }

        public void addIngredient(Herb herb) {
            ingredients.add(herb);
            System.out.println(herb.getName() + " added to the alchemy mix.");
        }

        public Potion createPotion() {
            if (ingredients.isEmpty()) {
                System.out.println("No ingredients available to create a potion.");
                return null;
            }
            int totalEffect = 0;
            for (Herb herb : ingredients) {
                totalEffect += herb.getRarity();
            }
            ingredients.clear();
            int potency = totalEffect * alchemySkillLevel;
            System.out.println("Potion created with potency: " + potency);
            return new Potion("Custom Potion", potency);
        }
    }

    class Potion {
        private String name;
        private int effectAmount;
        private boolean isMagical;

        public Potion(String name, int effectAmount) {
            this.name = name;
            this.effectAmount = effectAmount;
            this.isMagical = false;
        }

        public void drink(Player player) {
            if (isMagical) {
                System.out.println("Drinking magical potion: " + name);
            } else {
                System.out.println("Drinking potion: " + name);
            }
            player.heal(effectAmount);
        }

        public void enchant() {
            this.isMagical = true;
            System.out.println(name + " has been enchanted and is now a magical potion!");
        }
    }
}

class RPGGameCoreElements {
    class Player {
        private String name;
        private int health;
        private int mana;
        private int level;
        private int experience;
        private Inventory inventory;

        public Player(String name, int health, int mana, int level) {
            this.name = name;
            this.health = health;
            this.mana = mana;
            this.level = level;
            this.experience = 0;
            this.inventory = new Inventory();
        }

        public void attack(Enemy enemy) {
            int damage = level * 10 + (int)(Math.random() * 5); // Add some variability to damage
            System.out.println(name + " attacks " + enemy.getName() + " for " + damage + " damage!");
            enemy.takeDamage(damage);
            if (enemy.getHealth() <= 0) {
                gainExperience(enemy.getExperiencePoints());
            }
        }

        public void heal(int amount) {
            health += amount;
            health = Math.min(health, getMaxHealth()); // Ensure health doesn't exceed max health
            System.out.println(name + " heals for " + amount + " health points. Current health: " + health);
        }

        public void castSpell(Spell spell, Enemy enemy) {
            if (mana >= spell.getManaCost()) {
                mana -= spell.getManaCost();
                System.out.println(name + " casts " + spell.getName() + " on " + enemy.getName() + " for " + spell.getDamage() + " damage!");
                enemy.takeDamage(spell.getDamage());
            } else {
                System.out.println(name + " does not have enough mana to cast " + spell.getName() + ".");
            }
        }

        public void gainExperience(int xp) {
            experience += xp;
            System.out.println(name + " gains " + xp + " experience points. Total experience: " + experience);
            if (experience >= level * 100) { // Example leveling system
                levelUp();
            }
        }

        private void levelUp() {
            level++;
            experience = 0;
            health = getMaxHealth();
            mana += 10;
            System.out.println(name + " has leveled up! New level: " + level + ". Health and mana restored.");
        }

        public int getMaxHealth() {
            return 100 + (level * 20);
        }

        public int getHealth() {
            return health;
        }

        public String getName() {
            return name;
        }

        public Inventory getInventory() {
            return inventory;
        }
    }

    class Enemy {
        private String name;
        private int health;
        private int damage;
        private int experiencePoints;

        public Enemy(String name, int health, int damage, int experiencePoints) {
            this.name = name;
            this.health = health;
            this.damage = damage;
            this.experiencePoints = experiencePoints;
        }

        public void attack(Player player) {
            int attackDamage = damage + (int)(Math.random() * 3); // Add some variability to damage
            System.out.println(name + " attacks " + player.getName() + " for " + attackDamage + " damage!");
            player.heal(-attackDamage);
        }

        public void takeDamage(int damage) {
            health -= damage;
            if (health <= 0) {
                System.out.println(name + " has been defeated!");
            } else {
                System.out.println(name + " has " + health + " health remaining.");
            }
        }

        public String getName() {
            return name;
        }

        public int getHealth() {
            return health;
        }

        public int getExperiencePoints() {
            return experiencePoints;
        }
    }

    class Inventory {
        private List<Item> items;

        public Inventory() {
            this.items = new ArrayList<>();
        }

        public void addItem(Item item) {
            items.add(item);
            System.out.println(item.getName() + " added to inventory.");
        }

        public void useItem(String itemName, Player player) {
            for (Item item : items) {
                if (item.getName().equals(itemName)) {
                    item.use(player);
                    items.remove(item);
                    return;
                }
            }
            System.out.println("Item " + itemName + " not found in inventory.");
        }

        public void listItems() {
            if (items.isEmpty()) {
                System.out.println("Inventory is empty.");
            } else {
                System.out.println("Items in inventory:");
                for (Item item : items) {
                    System.out.println("- " + item.getName());
                }
            }
        }
    }

    class Item {
        private String name;
        private String type;
        private int value;

        public Item(String name, String type, int value) {
            this.name = name;
            this.type = type;
            this.value = value;
        }

        public void use(Player player) {
            if (type.equals("healing")) {
                player.heal(value);
                System.out.println(name + " used, healing " + value + " health points.");
            } else if (type.equals("mana")) {
                player.mana += value;
                System.out.println(name + " used, restoring " + value + " mana points.");
            } else {
                System.out.println(name + " used, but nothing happened.");
            }
        }

        public String getName() {
            return name;
        }
    }

    class Spell {
        private String name;
        private int manaCost;
        private int damage;

        public Spell(String name, int manaCost, int damage) {
            this.name = name;
            this.manaCost = manaCost;
            this.damage = damage;
        }

        public String getName() {
            return name;
        }

        public int getManaCost() {
            return manaCost;
        }

        public int getDamage() {
            return damage;
        }

        public void cast(Player player, Enemy enemy) {
            if (player.mana >= manaCost) {
                player.mana -= manaCost;
                System.out.println(player.getName() + " casts " + name + " on " + enemy.getName() + " for " + damage + " damage!");
                enemy.takeDamage(damage);
            } else {
                System.out.println(player.getName() + " does not have enough mana to cast " + name + ".");
            }
        }
    }

    class Mount {
        private String name;
        private int speed;
        private boolean isSpecial;

        public Mount(String name, int speed, boolean isSpecial) {
            this.name = name;
            this.speed = speed;
            this.isSpecial = isSpecial;
        }

        public void ride(Player player) {
            System.out.println(player.getName() + " is now riding " + name + " at a speed of " + speed + ".");
        }

        public void boostSpeed(int additionalSpeed) {
            speed += additionalSpeed;
            System.out.println(name + "'s speed has been boosted to " + speed + ".");
        }
    }
}

class RPGGameElements {
    class Quest {
        private String title;
        private String description;
        private int reward;
        private boolean isCompleted;
        private List<String> objectives;

        public Quest(String title, String description, int reward, List<String> objectives) {
            this.title = title;
            this.description = description;
            this.reward = reward;
            this.isCompleted = false;
            this.objectives = objectives;
        }

        public void startQuest() {
            System.out.println("Quest started: " + title + " - " + description);
            for (String objective : objectives) {
                System.out.println("Objective: " + objective);
            }
        }

        public void completeObjective(String objective) {
            if (objectives.contains(objective)) {
                objectives.remove(objective);
                System.out.println("Objective completed: " + objective);
                if (objectives.isEmpty()) {
                    completeQuest();
                }
            } else {
                System.out.println("Objective not found: " + objective);
            }
        }

        public void completeQuest(Player player) {
            if (!isCompleted) {
                isCompleted = true;
                player.gainExperience(reward);
                System.out.println("Quest completed: " + title + ". Reward: " + reward + " XP");
            } else {
                System.out.println("Quest already completed.");
            }
        }
    }

    class Guild {
        private String name;
        private List<Player> members;
        private int guildLevel;
        private int experience;

        public Guild(String name) {
            this.name = name;
            this.members = new ArrayList<>();
            this.guildLevel = 1;
            this.experience = 0;
        }

        public void addMember(Player player) {
            if (!members.contains(player)) {
                members.add(player);
                System.out.println(player.getName() + " has joined the guild " + name + ".");
            } else {
                System.out.println(player.getName() + " is already a member of the guild.");
            }
        }

        public void assignQuest(Player player, Quest quest) {
            System.out.println("Guild " + name + " assigns the quest: " + quest.title + " to " + player.getName());
            quest.startQuest();
        }

        public void gainExperience(int xp) {
            experience += xp;
            System.out.println("Guild " + name + " gained " + xp + " experience points. Total: " + experience);
            if (experience >= guildLevel * 1000) {
                levelUp();
            }
        }

        private void levelUp() {
            guildLevel++;
            experience = 0;
            System.out.println("Guild " + name + " has leveled up! New level: " + guildLevel);
        }
    }

    class Boss {
        private String name;
        private int health;
        private int damage;
        private Loot reward;
        private boolean enraged;

        public Boss(String name, int health, int damage, Loot reward) {
            this.name = name;
            this.health = health;
            this.damage = damage;
            this.reward = reward;
            this.enraged = false;
        }

        public void attack(Player player) {
            int actualDamage = enraged ? damage * 2 : damage;
            System.out.println(name + " attacks " + player.getName() + " for " + actualDamage + " damage!");
            player.takeDamage(actualDamage);
        }

        public void takeDamage(int damage) {
            health -= damage;
            if (health <= health / 2 && !enraged) {
                enrage();
            }
            if (health <= 0) {
                System.out.println(name + " has been defeated!");
                dropLoot();
            } else {
                System.out.println(name + " has " + health + " health remaining.");
            }
        }

        private void enrage() {
            enraged = true;
            System.out.println(name + " is enraged! Damage doubled!");
        }

        public void dropLoot() {
            System.out.println("Boss " + name + " dropped loot: " + reward.getName() + " (" + reward.getRarity() + ")");
        }
    }

    class Dungeon {
        private String name;
        private int levelRequirement;
        private List<Enemy> enemies;
        private Boss boss;
        private int treasureCount;

        public Dungeon(String name, int levelRequirement, List<Enemy> enemies, Boss boss, int treasureCount) {
            this.name = name;
            this.levelRequirement = levelRequirement;
            this.enemies = enemies;
            this.boss = boss;
            this.treasureCount = treasureCount;
        }

        public void enter(Player player) {
            if (player.level >= levelRequirement) {
                System.out.println(player.getName() + " enters the dungeon: " + name);
                for (Enemy enemy : enemies) {
                    while (enemy.getHealth() > 0 && player.getHealth() > 0) {
                        player.attack(enemy);
                        if (enemy.getHealth() > 0) {
                            enemy.attack(player);
                        }
                    }
                }
                if (player.getHealth() > 0) {
                    System.out.println("The boss " + boss.name + " appears!");
                    while (boss.health > 0 && player.getHealth() > 0) {
                        player.attack(boss);
                        if (boss.health > 0) {
                            boss.attack(player);
                        }
                    }
                    if (player.getHealth() > 0) {
                        findTreasure(player);
                    }
                }
            } else {
                System.out.println("Level requirement not met. Dungeon level requirement: " + levelRequirement);
            }
        }

        private void findTreasure(Player player) {
            System.out.println(player.getName() + " found " + treasureCount + " treasures in the dungeon!");
        }
    }

    class City {
        private String name;
        private List<Shop> shops;
        private Healer healer;
        private Trainer trainer;

        public City(String name) {
            this.name = name;
            this.shops = new ArrayList<>();
            this.healer = new Healer();
            this.trainer = new Trainer();
        }

        public void rest(Player player) {
            player.heal(player.getMaxHealth() / 2);
            System.out.println(player.getName() + " rests in the city " + name + " and recovers health.");
        }

        public void addShop(Shop shop) {
            shops.add(shop);
        }

        public void visitShop(Player player, String shopName) {
            for (Shop shop : shops) {
                if (shop.getName().equals(shopName)) {
                    shop.interact(player);
                    return;
                }
            }
            System.out.println("Shop " + shopName + " not found in city " + name);
        }

        public void healPlayer(Player player) {
            healer.heal(player);
        }

        public void trainPlayer(Player player) {
            trainer.train(player);
        }
    }

    class Shop {
        private String name;
        private List<Item> itemsForSale;

        public Shop(String name) {
            this.name = name;
            this.itemsForSale = new ArrayList<>();
        }

        public void addItem(Item item) {
            itemsForSale.add(item);
        }

        public void interact(Player player) {
            System.out.println("Welcome to " + name + "! Items available:");
            for (Item item : itemsForSale) {
                System.out.println("- " + item.getName() + " (" + item.type + "): " + item.value + " gold");
            }
        }

        public String getName() {
            return name;
        }
    }

    class Trap {
        private String type;
        private int damage;
        private boolean hidden;

        public Trap(String type, int damage, boolean hidden) {
            this.type = type;
            this.damage = damage;
            this.hidden = hidden;
        }

        public void trigger(Player player) {
            if (hidden) {
                System.out.println("A hidden trap has been triggered! " + type + " deals " + damage + " damage to " + player.getName());
            } else {
                System.out.println("Trap triggered! " + type + " deals " + damage + " damage to " + player.getName());
            }
            player.takeDamage(damage);
        }
    }

    class Artifact {
        private String name;
        private String effect;
        private int cooldown;
        private boolean isOnCooldown;

        public Artifact(String name, String effect, int cooldown) {
            this.name = name;
            this.effect = effect;
            this.cooldown = cooldown;
            this.isOnCooldown = false;
        }

        public void use(Player player) {
            if (isOnCooldown) {
                System.out.println("Artifact " + name + " is on cooldown. Please wait.");
            } else {
                System.out.println("Using artifact: " + name + " - Effect: " + effect);
                activateCooldown();
                // Effect logic can be implemented as per the game mechanics
            }
        }

        private void activateCooldown() {
            isOnCooldown = true;
            System.out.println("Artifact " + name + " is now on cooldown for " + cooldown + " turns.");
        }
    }
}

class RPGGameElements {
    enum PlayerClass {
        WARRIOR, MAGE, ARCHER
    }

    class Player {
        private String name;
        private PlayerClass playerClass;
        private int health;
        private int mana;
        private int level;
        private int experience;
        private Inventory inventory;
        private int strength;
        private int agility;
        private int intelligence;
        private int defense;
        private int gold;

        public Player(String name, PlayerClass playerClass) {
            this.name = name;
            this.playerClass = playerClass;
            this.level = 1;
            this.experience = 0;
            this.gold = 100;
            this.inventory = new Inventory();
            initializeStatsBasedOnClass();
        }

        private void initializeStatsBasedOnClass() {
            switch (playerClass) {
                case WARRIOR:
                    this.health = 150;
                    this.mana = 50;
                    this.strength = 20;
                    this.agility = 10;
                    this.intelligence = 5;
                    this.defense = 15;
                    break;
                case MAGE:
                    this.health = 80;
                    this.mana = 150;
                    this.strength = 5;
                    this.agility = 10;
                    this.intelligence = 25;
                    this.defense = 5;
                    break;
                case ARCHER:
                    this.health = 100;
                    this.mana = 80;
                    this.strength = 10;
                    this.agility = 25;
                    this.intelligence = 10;
                    this.defense = 10;
                    break;
            }
        }

        public void attack(Enemy enemy) {
            int damage;
            switch (playerClass) {
                case WARRIOR:
                    damage = strength + (int) (Math.random() * 10);
                    System.out.println(name + " (Warrior) attacks " + enemy.getName() + " for " + damage + " damage!");
                    break;
                case MAGE:
                    if (mana >= 20) {
                        damage = intelligence + (int) (Math.random() * 15);
                        mana -= 20;
                        System.out.println(name + " (Mage) casts a spell on " + enemy.getName() + " for " + damage + " damage! Mana left: " + mana);
                    } else {
                        System.out.println(name + " does not have enough mana to cast a spell.");
                        return;
                    }
                    break;
                case ARCHER:
                    damage = agility + (int) (Math.random() * 12);
                    System.out.println(name + " (Archer) shoots an arrow at " + enemy.getName() + " for " + damage + " damage!");
                    break;
                default:
                    damage = 0;
            }
            enemy.takeDamage(damage);
            if (enemy.getHealth() <= 0) {
                gainExperience(enemy.getExperiencePoints());
                collectLoot(enemy.getLoot());
            }
        }

        public void heal(int amount) {
            health += amount;
            health = Math.min(health, getMaxHealth()); // Ensure health doesn't exceed max
            System.out.println(name + " heals for " + amount + " health points. Current health: " + health);
        }

        public void gainExperience(int xp) {
            experience += xp;
            System.out.println(name + " gains " + xp + " experience points. Total experience: " + experience);
            if (experience >= level * 100) {
                levelUp();
            }
        }

        private void levelUp() {
            level++;
            experience = 0;
            health = getMaxHealth();
            mana += 10;
            switch (playerClass) {
                case WARRIOR:
                    strength += 7;
                    agility += 3;
                    defense += 5;
                    break;
                case MAGE:
                    intelligence += 7;
                    mana += 20;
                    agility += 2;
                    break;
                case ARCHER:
                    agility += 7;
                    strength += 3;
                    defense += 2;
                    break;
            }
            System.out.println(name + " has leveled up! New level: " + level + ". Health, mana, and stats improved.");
        }

        public void collectLoot(Loot loot) {
            System.out.println(name + " has collected loot: " + loot.getName() + " (Rarity: " + loot.getRarity() + ")");
            inventory.addItem(loot);
            if (loot.getValue() > 0) {
                gold += loot.getValue();
                System.out.println(name + " has gained " + loot.getValue() + " gold. Total gold: " + gold);
            }
        }

        public int getMaxHealth() {
            return health + (level * 20);
        }

        public int getHealth() {
            return health;
        }

        public String getName() {
            return name;
        }

        public Inventory getInventory() {
            return inventory;
        }

        public int getGold() {
            return gold;
        }

        public void takeDamage(int damage) {
            health -= damage;
            if (health <= 0) {
                System.out.println(name + " has been defeated!");
            } else {
                System.out.println(name + " has " + health + " health remaining.");
            }
        }
    }

    class Enemy {
        private String name;
        private int health;
        private int damage;
        private int experiencePoints;
        private Loot loot;

        public Enemy(String name, int health, int damage, int experiencePoints, Loot loot) {
            this.name = name;
            this.health = health;
            this.damage = damage;
            this.experiencePoints = experiencePoints;
            this.loot = loot;
        }

        public void attack(Player player) {
            int attackDamage = damage + (int)(Math.random() * 3); // Variability in attack damage
            System.out.println(name + " attacks " + player.getName() + " for " + attackDamage + " damage!");
            player.takeDamage(attackDamage);
        }

        public void takeDamage(int damage) {
            health -= damage;
            if (health <= 0) {
                System.out.println(name + " has been defeated!");
            } else {
                System.out.println(name + " has " + health + " health remaining.");
            }
        }

        public String getName() {
            return name;
        }

        public int getHealth() {
            return health;
        }

        public int getExperiencePoints() {
            return experiencePoints;
        }

        public Loot getLoot() {
            return loot;
        }
    }

    class Healer {
        private int healingPower;
        private int cost;

        public Healer() {
            this.healingPower = 50;
            this.cost = 20; // Cost in gold
        }

        public void heal(Player player) {
            if (player.getGold() >= cost) {
                player.heal(healingPower);
                System.out.println("Healer heals " + player.getName() + " for " + healingPower + " health points for " + cost + " gold.");
            } else {
                System.out.println("Not enough gold for healing. Healer requires " + cost + " gold.");
            }
        }
    }

    class Trainer {
        private String skillType;
        private int trainingCost;

        public Trainer() {
            this.skillType = "Combat Skills";
            this.trainingCost = 100;
        }

        public void train(Player player) {
            if (player.getGold() >= trainingCost) {
                System.out.println("Trainer trains " + player.getName() + " in " + skillType + ". Training cost: " + trainingCost + " gold.");
                player.gainExperience(50); // Gain experience through training
                // Reduce player's gold
            } else {
                System.out.println(player.getName() + " doesn't have enough gold for training. Required: " + trainingCost);
            }
        }
    }

    class Loot {
        private String name;
        private String rarity;
        private int value;

        public Loot(String name, String rarity, int value) {
            this.name = name;
            this.rarity = rarity;
            this.value = value;
        }

        public String getName() {
            return name;
        }

        public String getRarity() {
            return rarity;
        }

        public int getValue() {
            return value;
        }
    }

    class Item {
        private String name;
        private String type;
        private int value;

        public Item(String name, String type, int value) {
            this.name = name;
            this.type = type;
            this.value = value;
        }

        public void use(Player player) {
            if (type.equals("healing")) {
                player.heal(value);
                System.out.println(name + " used, healing " + value + " health points.");
            } else if (type.equals("mana")) {
                player.mana += value;
                System.out.println(name + " used, restoring " + value + " mana points.");
            } else {
                System.out.println(name + " used, but nothing happened.");
            }
        }

        public String getName() {
            return name;
        }
    }

    class Mount {
        private String name;
        private int speed;
        private boolean isSpecial;
        private int stamina;

        public Mount(String name, int speed, boolean isSpecial) {
            this.name = name;
            this.speed = speed;
            this.isSpecial = isSpecial;
            this.stamina = 100;
        }

        public void ride(Player player) {
            if (stamina > 0) {
                System.out.println(player.getName() + " is now riding " + name + " at a speed of " + speed + ".");
                stamina -= 10;
                System.out.println(name + " has " + stamina + " stamina remaining.");
            } else {
                System.out.println(name + " is too tired to continue. Rest required.");
            }
        }

        public void rest() {
            stamina = 100;
            System.out.println(name + " has rested and regained full stamina.");
        }
    }

    class Pet {
        private String name;
        private int loyalty;
        private String type;
        private int assistPower;

        public Pet(String name, int loyalty, String type) {
            this.name = name;
            this.loyalty = loyalty;
            this.type = type;
            this.assistPower = 10 + loyalty / 2;
        }

        public void follow(Player player) {
            System.out.println(name + " is loyally following " + player.getName() + ".");
        }

        public void assist(Player player) {
            System.out.println(name + " assists " + player.getName() + " in battle, providing " + assistPower + " extra damage.");
            // Add specific logic for pet assistance, e.g., increasing player attack
        }
    }
}

class RPGGameElements {

    // New Quest Class
    class Quest {
        private String title;
        private String description;
        private int reward;
        private boolean isCompleted;
        private List<String> objectives;
        private int difficultyLevel;

        public Quest(String title, String description, int reward, int difficultyLevel, List<String> objectives) {
            this.title = title;
            this.description = description;
            this.reward = reward;
            this.isCompleted = false;
            this.objectives = objectives;
            this.difficultyLevel = difficultyLevel;
        }

        public void startQuest() {
            System.out.println("Quest started: " + title + " - " + description);
            System.out.println("Difficulty Level: " + difficultyLevel);
            for (String objective : objectives) {
                System.out.println("Objective: " + objective);
            }
        }

        public void completeObjective(String objective) {
            if (objectives.contains(objective)) {
                objectives.remove(objective);
                System.out.println("Objective completed: " + objective);
                if (objectives.isEmpty()) {
                    completeQuest();
                }
            } else {
                System.out.println("Objective not found: " + objective);
            }
        }

        public void completeQuest(Player player) {
            if (!isCompleted) {
                isCompleted = true;
                player.gainExperience(reward);
                System.out.println("Quest completed: " + title + ". Reward: " + reward + " XP");
            } else {
                System.out.println("Quest already completed.");
            }
        }
    }

    // Updated City Class
    class City {
        private String name;
        private List<Shop> shops;
        private Healer healer;
        private Trainer trainer;
        private List<NPC> npcs;

        public City(String name) {
            this.name = name;
            this.shops = new ArrayList<>();
            this.healer = new Healer();
            this.trainer = new Trainer();
            this.npcs = new ArrayList<>();
        }

        public void rest(Player player) {
            player.heal(player.getMaxHealth() / 2);
            System.out.println(player.getName() + " rests in the city " + name + " and recovers health.");
        }

        public void addShop(Shop shop) {
            shops.add(shop);
        }

        public void visitShop(Player player, String shopName) {
            for (Shop shop : shops) {
                if (shop.getName().equals(shopName)) {
                    shop.interact(player);
                    return;
                }
            }
            System.out.println("Shop " + shopName + " not found in city " + name);
        }

        public void healPlayer(Player player) {
            healer.heal(player);
        }

        public void trainPlayer(Player player) {
            trainer.train(player);
        }

        public void addNPC(NPC npc) {
            npcs.add(npc);
        }

        public void interactWithNPC(String npcName) {
            for (NPC npc : npcs) {
                if (npc.getName().equals(npcName)) {
                    npc.interact();
                    return;
                }
            }
            System.out.println("NPC " + npcName + " not found in city " + name);
        }
    }

    // Updated Shop Class
    class Shop {
        private String name;
        private List<Item> itemsForSale;

        public Shop(String name) {
            this.name = name;
            this.itemsForSale = new ArrayList<>();
        }

        public void addItem(Item item) {
            itemsForSale.add(item);
        }

        public void interact(Player player) {
            System.out.println("Welcome to " + name + "! Items available:");
            for (Item item : itemsForSale) {
                System.out.println("- " + item.getName() + " (" + item.getType() + "): " + item.getValue() + " gold");
            }
            // Adding the option for player to buy items
            System.out.println("Type the name of the item you want to buy.");
            // Here we would add input logic to handle the purchase
        }

        public String getName() {
            return name;
        }
    }

    // Updated Dungeon Class
    class Dungeon {
        private String name;
        private int levelRequirement;
        private List<Enemy> enemies;
        private Boss boss;
        private int treasureCount;
        private boolean isCompleted;

        public Dungeon(String name, int levelRequirement, List<Enemy> enemies, Boss boss, int treasureCount) {
            this.name = name;
            this.levelRequirement = levelRequirement;
            this.enemies = enemies;
            this.boss = boss;
            this.treasureCount = treasureCount;
            this.isCompleted = false;
        }

        public void enter(Player player) {
            if (player.getLevel() >= levelRequirement) {
                System.out.println(player.getName() + " enters the dungeon: " + name);
                for (Enemy enemy : enemies) {
                    while (enemy.getHealth() > 0 && player.getHealth() > 0) {
                        player.attack(enemy);
                        if (enemy.getHealth() > 0) {
                            enemy.attack(player);
                        }
                    }
                }
                if (player.getHealth() > 0) {
                    System.out.println("The boss " + boss.getName() + " appears!");
                    while (boss.getHealth() > 0 && player.getHealth() > 0) {
                        player.attack(boss);
                        if (boss.getHealth() > 0) {
                            boss.attack(player);
                        }
                    }
                    if (player.getHealth() > 0) {
                        findTreasure(player);
                        isCompleted = true;
                    }
                }
            } else {
                System.out.println("Level requirement not met. Dungeon level requirement: " + levelRequirement);
            }
        }

        private void findTreasure(Player player) {
            System.out.println(player.getName() + " found " + treasureCount + " treasures in the dungeon!");
            player.addGold(treasureCount * 10); // Player receives gold as a reward
        }
    }

    // Updated Guild Class
    class Guild {
        private String name;
        private List<Player> members;
        private int guildLevel;
        private int experience;
        private List<Quest> guildQuests;

        public Guild(String name) {
            this.name = name;
            this.members = new ArrayList<>();
            this.guildLevel = 1;
            this.experience = 0;
            this.guildQuests = new ArrayList<>();
        }

        public void addMember(Player player) {
            if (!members.contains(player)) {
                members.add(player);
                System.out.println(player.getName() + " has joined the guild " + name + ".");
            } else {
                System.out.println(player.getName() + " is already a member of the guild.");
            }
        }

        public void gainExperience(int xp) {
            experience += xp;
            System.out.println("Guild " + name + " gained " + xp + " experience points. Total: " + experience);
            if (experience >= guildLevel * 1000) {
                levelUp();
            }
        }

        private void levelUp() {
            guildLevel++;
            experience = 0;
            System.out.println("Guild " + name + " has leveled up! New level: " + guildLevel);
        }

        public void addGuildQuest(Quest quest) {
            guildQuests.add(quest);
        }

        public void assignQuest(Player player) {
            if (!guildQuests.isEmpty()) {
                Quest quest = guildQuests.remove(0);
                System.out.println("Guild " + name + " assigns quest: " + quest.title + " to " + player.getName());
                quest.startQuest();
            } else {
                System.out.println("No quests available in the guild.");
            }
        }
    }

    // Updated Boss Class
    class Boss {
        private String name;
        private int health;
        private int damage;
        private Loot reward;
        private boolean enraged;
        private String specialAbility;

        public Boss(String name, int health, int damage, Loot reward, String specialAbility) {
            this.name = name;
            this.health = health;
            this.damage = damage;
            this.reward = reward;
            this.enraged = false;
            this.specialAbility = specialAbility;
        }

        public void attack(Player player) {
            int actualDamage = enraged ? damage * 2 : damage;
            System.out.println(name + " attacks " + player.getName() + " for " + actualDamage + " damage!");
            player.takeDamage(actualDamage);
            if (Math.random() > 0.7) { // 30% chance to use special ability
                useSpecialAbility(player);
            }
        }

        private void useSpecialAbility(Player player) {
            System.out.println(name + " uses special ability: " + specialAbility + " on " + player.getName() + "!");
            player.takeDamage(damage / 2); // Special ability deals additional damage
        }

        public void takeDamage(int damage) {
            health -= damage;
            if (health <= health / 2 && !enraged) {
                enrage();
            }
            if (health <= 0) {
                System.out.println(name + " has been defeated!");
                dropLoot();
            } else {
                System.out.println(name + " has " + health + " health remaining.");
            }
        }

        private void enrage() {
            enraged = true;
            System.out.println(name + " is enraged! Damage doubled!");
        }

        public void dropLoot() {
            System.out.println("Boss " + name + " dropped loot: " + reward.getName() + " (" + reward.getRarity() + ")");
        }

        public String getName() {
            return name;
        }

        public int getHealth() {
            return health;
        }
    }
}

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

public class RPGGame {
    public static void main(String[] args) {
        JFrame frame = new JFrame("RPG Game - Sturmwind");
        GamePanel gamePanel = new GamePanel();
        frame.add(gamePanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 600);
        frame.setVisible(true);
    }
}

class GamePanel extends JPanel {
    private Player player;
    private List<Enemy> enemies;
    private List<Item> items;
    private List<NPC> npcs;
    private List<Quest> quests;
    private Timer timer;
    private HashMap<String, Image> animations;
    private Random random;

    public GamePanel() {
        this.animations = AnimationsLoader.loadAnimations();
        this.player = new Player(animations);
        this.enemies = new ArrayList<>();
        this.items = new ArrayList<>();
        this.npcs = new ArrayList<>();
        this.quests = new ArrayList<>();
        this.random = new Random();
        initializeGameObjects();
        this.timer = new Timer(16, e -> updateGame()); // Timer for game updates
        this.timer.start();
    }

    private void initializeGameObjects() {
        // Initialize some enemies, items, and NPCs for the game
        enemies.add(new Enemy(animations, random.nextInt(800), random.nextInt(600)));
        items.add(new Item("Health Potion", "Potion", 50));
        items.add(new Item("Mana Potion", "Mana", 30));
        npcs.add(new NPC("Village Elder", random.nextInt(800), random.nextInt(600)));
        quests.add(new Quest("Save the Village", "Defeat the monsters terrorizing the village"));
    }

    private void updateGame() {
        player.update();
        for (Enemy enemy : enemies) {
            enemy.update(player);
        }
        repaint();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        player.draw(g);
        for (Enemy enemy : enemies) {
            enemy.draw(g);
        }
        for (Item item : items) {
            item.draw(g);
        }
        for (NPC npc : npcs) {
            npc.draw(g);
        }
    }
}

class AnimationsLoader {
    public static HashMap<String, Image> loadAnimations() {
        // Dummy implementation for loading animations
        return new HashMap<>();
    }
}

class Player {
    private int health;
    private int mana;
    private int stamina;
    private HashMap<String, Image> animations;
    private int x, y;
    private int speed;
    private boolean isAlive;

    public Player(HashMap<String, Image> animations) {
        this.animations = animations;
        this.health = 100;
        this.mana = 50;
        this.stamina = 100;
        this.x = 100;
        this.y = 100;
        this.speed = 5;
        this.isAlive = true;
    }

    public void move(int dx, int dy) {
        x += dx * speed;
        y += dy * speed;
    }

    public void attack(Enemy enemy) {
        if (isAlive) {
            enemy.takeDamage(20);
            System.out.println("Player attacked " + enemy.getName() + " for 20 damage");
        }
    }

    public void takeDamage(int damage) {
        health -= damage;
        System.out.println("Player takes " + damage + " damage. Health: " + health);
        if (health <= 0) {
            isAlive = false;
            System.out.println("Player has died");
        }
    }

    public void heal(int amount) {
        health += amount;
        if (health > 100) {
            health = 100;
        }
        System.out.println("Player healed by " + amount + ". Current health: " + health);
    }

    public void restoreMana(int amount) {
        mana += amount;
        if (mana > 100) {
            mana = 100;
        }
        System.out.println("Player restored mana by " + amount + ". Current mana: " + mana);
    }

    public void useItem(Item item) {
        item.use(this);
    }

    public void update() {
        if (stamina < 100) {
            stamina++; // Regenerate stamina over time
        }
    }

    public boolean isAlive() {
        return isAlive;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public void draw(Graphics g) {
        g.setColor(Color.BLUE);
        g.fillRect(x, y, 30, 30); // Simple representation of the player
    }
}

class Enemy {
    private int health;
    private int damage;
    private int x, y;
    private int speed;
    private HashMap<String, Image> animations;
    private String name;

    public Enemy(HashMap<String, Image> animations, int x, int y) {
        this.animations = animations;
        this.health = 50;
        this.damage = 10;
        this.x = x;
        this.y = y;
        this.speed = 2;
        this.name = "Goblin";
    }

    public void takeDamage(int damage) {
        health -= damage;
        System.out.println(name + " takes " + damage + " damage. Health: " + health);
        if (health <= 0) {
            System.out.println(name + " has been defeated");
        }
    }

    public void attack(Player player) {
        if (health > 0) {
            player.takeDamage(damage);
            System.out.println(name + " attacked Player for " + damage + " damage");
        }
    }

    public void update(Player player) {
        // Basic AI to move towards the player
        if (player.isAlive()) {
            if (x < player.getX()) {
                x += speed;
            } else if (x > player.getX()) {
                x -= speed;
            }

            if (y < player.getY()) {
                y += speed;
            } else if (y > player.getY()) {
                y -= speed;
            }
        }
    }

    public String getName() {
        return name;
    }

    public void draw(Graphics g) {
        g.setColor(Color.RED);
        g.fillRect(x, y, 30, 30); // Simple representation of the enemy
    }
}

class Item {
    private String name;
    private String type;
    private int value;

    public Item(String name, String type, int value) {
        this.name = name;
        this.type = type;
        this.value = value;
    }

    public void use(Player player) {
        switch (type) {
            case "Potion":
                player.heal(value);
                System.out.println("Using " + name + ", restored " + value + " health points.");
                break;
            case "Mana":
                player.restoreMana(value);
                System.out.println("Using " + name + ", restored " + value + " mana points.");
                break;
            default:
                System.out.println("Using item: " + name);
        }
    }

    public String getName() {
        return name;
    }

    public void draw(Graphics g) {
        g.setColor(Color.ORANGE);
        g.fillOval(400, 300, 10, 10); // Simple representation of an item on the ground
    }
}

class NPC {
    private String name;
    private int x, y;

    public NPC(String name, int x, int y) {
        this.name = name;
        this.x = x;
        this.y = y;
    }

    public void interact() {
        System.out.println("Interacting with NPC: " + name);
    }

    public void draw(Graphics g) {
        g.setColor(Color.GREEN);
        g.fillRect(x, y, 20, 20); // Simple representation of an NPC
    }
}

class Quest {
    private String title;
    private String description;
    private boolean isCompleted;

    public Quest(String title, String description) {
        this.title = title;
        this.description = description;
        this.isCompleted = false;
    }

    public void completeQuest() {
        this.isCompleted = true;
        System.out.println("Quest completed: " + title);
    }

    public void showDetails() {
        System.out.println("Quest: " + title + " - " + description + " (Completed: " + isCompleted + ")");
    }
}

// Extensions and improvements added:
// - GamePanel now initializes more diverse game objects, such as different items.
// - Added draw methods to Player, Enemy, NPC, and Item classes to render them on the screen.
// - Added more game mechanics such as mana restoration, item representation, and improved game object initialization.
// - Enhanced the Enemy AI and Player methods to create more dynamic gameplay.

// Basisklasse Character
abstract class Character {
    protected String name;
    protected int health;
    protected int mana;
    protected int x, y;
    protected int speed;
    protected boolean isAlive;
    protected int defense;

    public Character(String name, int health, int mana, int x, int y, int speed) {
        this.name = name;
        this.health = health;
        this.mana = mana;
        this.x = x;
        this.y = y;
        this.speed = speed;
        this.isAlive = true;
        this.defense = 0;
    }

    public void move(int dx, int dy) {
        x += dx * speed;
        y += dy * speed;
    }

    public void takeDamage(int damage) {
        int effectiveDamage = Math.max(0, damage - defense);
        health -= effectiveDamage;
        System.out.println(name + " takes " + effectiveDamage + " damage. Health: " + health);
        if (health <= 0) {
            isAlive = false;
            System.out.println(name + " has died");
        }
    }

    public boolean isAlive() {
        return isAlive;
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    public abstract void attack(Character target);

    public void drawHealthBar(Graphics g) {
        g.setColor(Color.RED);
        g.fillRect(x, y - 10, health / 2, 5);
    }
}

// Klasse Player erbt von Character
class Player extends Character implements Drawable {
    private int stamina;
    private Inventory inventory;
    private List<Skill> skills;
    private PlayerClass playerClass;

    public Player(String name, int x, int y, int speed, PlayerClass playerClass) {
        super(name, 100, 50, x, y, speed);
        this.stamina = 100;
        this.inventory = new Inventory();
        this.skills = new ArrayList<>();
        this.playerClass = playerClass;
        initializeSkills();
    }

    private void initializeSkills() {
        switch (playerClass) {
            case WARRIOR:
                skills.add(new Skill("Power Strike", 30, 10));
                skills.add(new ShieldBlock("Shield Block", 0, 0));
                this.defense = 5;
                break;
            case MAGE:
                skills.add(new Skill("Fireball", 50, 20));
                skills.add(new MagicSkill("Arcane Blast", 70, 30));
                this.mana = 100;
                break;
            case ARCHER:
                skills.add(new Skill("Arrow Shot", 25, 5));
                skills.add(new PiercingArrow("Piercing Arrow", 40, 15));
                this.speed = 7;
                break;
        }
    }

    @Override
    public void attack(Character target) {
        if (isAlive) {
            target.takeDamage(20);
            System.out.println(name + " attacked " + target.name + " for 20 damage");
        }
    }

    public void useSkill(int skillIndex, Character target) {
        if (skillIndex >= 0 && skillIndex < skills.size()) {
            Skill skill = skills.get(skillIndex);
            if (mana >= skill.getManaCost()) {
                target.takeDamage(skill.getDamage());
                mana -= skill.getManaCost();
                System.out.println(name + " used skill " + skill.getName() + " on " + target.name + " for " + skill.getDamage() + " damage");
            } else {
                System.out.println("Not enough mana to use " + skill.getName());
            }
        }
    }

    public void heal(int amount) {
        health += amount;
        if (health > 100) {
            health = 100;
        }
        System.out.println(name + " healed by " + amount + ". Current health: " + health);
    }

    public void restoreMana(int amount) {
        mana += amount;
        if (mana > 100) {
            mana = 100;
        }
        System.out.println(name + " restored mana by " + amount + ". Current mana: " + mana);
    }

    public void addItemToInventory(Item item) {
        inventory.addItem(item);
    }

    public void useItemFromInventory(String itemName) {
        inventory.useItem(itemName, this);
    }

    public void showInventory() {
        inventory.listItems();
    }

    public void showStats() {
        System.out.println("Player Stats: ");
        System.out.println("Health: " + health);
        System.out.println("Mana: " + mana);
        System.out.println("Stamina: " + stamina);
    }

    @Override
    public void draw(Graphics g) {
        g.setColor(Color.BLUE);
        g.fillRect(x, y, 30, 30); // Simple representation of the player
        drawHealthBar(g);
    }
}

// Klasse Enemy erbt von Character
class Enemy extends Character implements Drawable {
    private String type;

    public Enemy(String name, String type, int x, int y, int speed) {
        super(name, 50, 0, x, y, speed);
        this.type = type;
    }

    @Override
    public void attack(Character target) {
        if (isAlive) {
            target.takeDamage(10);
            System.out.println(name + " attacked " + target.name + " for 10 damage");
        }
    }

    @Override
    public void draw(Graphics g) {
        g.setColor(Color.RED);
        g.fillRect(x, y, 30, 30); // Simple representation of the enemy
        drawHealthBar(g);
    }
}

// Interface Drawable
interface Drawable {
    void draw(Graphics g);
}

// Interface Interactable
interface Interactable {
    void interact();
}

// Klasse NPC implementiert Interactable und Drawable
class NPC implements Drawable, Interactable {
    private String name;
    private int x, y;

    public NPC(String name, int x, int y) {
        this.name = name;
        this.x = x;
        this.y = y;
    }

    @Override
    public void interact() {
        System.out.println("Interacting with NPC: " + name);
    }

    @Override
    public void draw(Graphics g) {
        g.setColor(Color.GREEN);
        g.fillRect(x, y, 20, 20); // Simple representation of an NPC
    }
}

// Klasse Item
class Item {
    private String name;
    private String type; // z.B. "healing", "mana", "weapon"
    private int value;

    public Item(String name, String type, int value) {
        this.name = name;
        this.type = type;
        this.value = value;
    }

    public String getName() {
        return name;
    }

    public String getType() {
        return type;
    }

    public int getValue() {
        return value;
    }

    public void use(Character character) {
        if (type.equals("healing")) {
            character.heal(value);
            System.out.println(name + " used, healing " + value + " health points.");
        } else if (type.equals("mana")) {
            character.restoreMana(value);
            System.out.println(name + " used, restoring " + value + " mana points.");
        } else {
            System.out.println(name + " used, but nothing happened.");
        }
    }
}

// Klasse Inventory
class Inventory {
    private List<Item> items;

    public Inventory() {
        items = new ArrayList<>();
    }

    public void addItem(Item item) {
        items.add(item);
        System.out.println(item.getName() + " added to inventory.");
    }

    public void useItem(String itemName, Character character) {
        for (Item item : items) {
            if (item.getName().equals(itemName)) {
                item.use(character);
                items.remove(item);
                return;
            }
        }
        System.out.println("Item " + itemName + " not found in inventory.");
    }

    public void listItems() {
        if (items.isEmpty()) {
            System.out.println("Inventory is empty.");
        } else {
            System.out.println("Items in inventory:");
            for (Item item : items) {
                System.out.println("- " + item.getName());
            }
        }
    }
}

// Klasse Skill
class Skill {
    private String name;
    private int damage;
    private int manaCost;

    public Skill(String name, int damage, int manaCost) {
        this.name = name;
        this.damage = damage;
        this.manaCost = manaCost;
    }

    public String getName() {
        return name;
    }

    public int getDamage() {
        return damage;
    }

    public int getManaCost() {
        return manaCost;
    }
}

// Erweiterte Skillklassen
class MagicSkill extends Skill {
    public MagicSkill(String name, int damage, int manaCost) {
        super(name, damage, manaCost);
    }
}

class ShieldBlock extends Skill {
    public ShieldBlock(String name, int damage, int manaCost) {
        super(name, damage, manaCost);
    }
}

class PiercingArrow extends Skill {
    public PiercingArrow(String name, int damage, int manaCost) {
        super(name, damage, manaCost);
    }
}

// Enumeration für Spielklassen
enum PlayerClass {
    WARRIOR, MAGE, ARCHER;
}

// Klasse Ally
class Ally extends Character implements Drawable {
    public Ally(String name, int health, int mana, int x, int y, int speed) {
        super(name, health, mana, x, y, speed);
    }

    @Override
    public void attack(Character target) {
        if (isAlive) {
            target.takeDamage(15);
            System.out.println(name + " assisted in attack, dealing 15 damage to " + target.name);
        }
    }

    @Override
    public void draw(Graphics g) {
        g.setColor(Color.CYAN);
        g.fillRect(x, y, 30, 30); // Simple representation of an ally
        drawHealthBar(g);
    }
}

// Klasse Pet
class Pet {
    private String name;
    private int loyalty;
    private String type;
    private int assistPower;

    public Pet(String name, int loyalty, String type) {
        this.name = name;
        this.loyalty = loyalty;
        this.type = type;
        this.assistPower = 10 + loyalty / 2;
    }

    public void follow(Player player) {
        System.out.println(name + " is loyally following " + player.name + ".");
    }

    public void assist(Player player) {
        System.out.println(name + " assists " + player.name + " in battle, providing " + assistPower + " extra damage.");
    }
}
